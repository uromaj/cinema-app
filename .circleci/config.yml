# This config is equivalent to both the '.circleci/extended/orb-free.yml' and the base '.circleci/config.yml'
orbs:
  slack: circleci/slack@4.12.1

version: 2.1
executors:
  app-executor:
    docker:
      - image: circleci/node:latest
    working_directory: ~/cinema-app
  slack-executor:
    docker:
      - image: 'cibuilds/base:latest'
    resource_class: small
  terraform-executor:
    docker:
      - image: hashicorp/terraform:latest   

aliases:
  - &show-current-branch-name
    run:
      name: Show current branch
      command: echo ${CIRCLE_BRANCH}
  - &restore-cache
    restore_cache:
      keys:
        - app-{{ checksum "package.json" }}
        - app-
  - &install-dependancies
    run:
      name: Insatll dependancies
      command: npm install
  - &save-cache
    save_cache:
      paths:
        - node_modules
      key: app-{{ checksum "package.json" }}
  - &install-aws-cli
    run:
      name: installing aws cli
      working_directory: /
      command: |
        sudo apt-get -y -qq update
        sudo apt-get install -y awscli
#       sudo apt-get install -y python-pip python-dev build-essential
  - &build-project
    run:
      name: Build Project
      command: |
        npm install
        npm run build
        cd build
        zip ../build.zip -r * .[^.]*
        echo "Build Successful"
jobs:
  build:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - *install-dependancies
      - *save-cache
  
  linting:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Linting
          command: npm run lint

  prettier:
    executor: app-executor
    steps:
      - checkout
      - *show-current-branch-name
      - *restore-cache
      - run:
          name: Run prettier
          command: npm run prettier:check

  teraform-validate:
    executor: terraform-executor
    steps:
      - checkout
      - *show-current-branch-name
      - run:
          name: Terraform Valicate and Format
          command: |
            cd infrustructure/
            terraform init -backend=false
            terraform validate
            terraform fmt -check

  teraform-plan-and-apply:
    executor: terraform-executor
    steps:
      - checkout
      - attach_workspace:
        at: ./
      - *show-current-branch-name
      - run:
          name: Terraform Plan
          command: |
            cd artifacts/infrustructure/
            terraform init 
            terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
            terraform plan
      - run:
          name: Terraform Apply
          command: |
            cd artifacts/infrustructure/
            terraform workspace select ${CIRCLE_BRANCH}
            terraform apply --auto-approve
            terraform output rw_cinema_app_s3_bucket_name > ../cinema_bucket_name.txt
            terraform output cloudfront_distribution_id > ../cloudfront_distribution_id.txt
      - presist_to_workspace:
        root: ./
        paths:
          - artifacts

  deploy-to-aws-s3:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
        at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run: 
          name: Deploy to aws s3
          command: |
            AWS_BUCKET_NAME=$(cat artifacts/cinema_bucket_name.txt | sed 's/\"//g')
            echo AWS_BUCKET_NAME
            if ["${CIRCLE_BRANCH}" == "master"]
            then 
              aws --region ${AWS_REGION} s3 sync ~/cinema-app/build s3://${AWS_BUCKET_NAME} --delete
            elif  ["${CIRCLE_BRANCH}" == "staging"]
            then
              aws --region ${AWS_REGION} s3 sync ~/cinema-app/build s3://${AWS_BUCKET_NAME} --delete
            else 
              aws --region ${AWS_REGION} s3 sync ~/cinema-app/build s3://${AWS_BUCKET_NAME} --delete
            fi

  deploy-to-aws-cloudfront:
    executor: app-executor
    steps:
      - checkout
      - attach_workspace:
        at: ./
      - *show-current-branch-name
      - *install-aws-cli
      - *build-project
      - run: 
          name: Deploy to aws cloudfront
          command: |
            CLOUDFRONT_DISTRIBUTION_ID=$(cat artifacts/cloudfront_distribution_id.txt | sed 's/\"//g')
            echo CLOUDFRONT_DISTRIBUTION_ID
            aws configure set preview.cloudfront true
            if ["${CIRCLE_BRANCH}" == "master"]
            then 
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\* 
            elif  ["${CIRCLE_BRANCH}" == "staging"]
            then
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            else 
              aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths /\*
            fi

  notify-via-slack:
    executor: slack-executor
    steps:
      - run: echo "Slack notification"
      - slack/notify:
          event: 'always'
          channel: 'circle'
          template: ''
          custom: |
            {
              "blocks": [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": "${CIRCLE_BRANCH} branch deployment to aws s3 and cloudfront is complete. üëç",
                    "emoji": true
                  }
                },
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Project*:\n$CIRCLE_PROJECT_REPONAME"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch*:\n$CIRCLE_BRANCH"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*When*:\n$(date +'%m/%d/%Y %T')"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Build*:\n$CIRCLE_BUILD_NUM"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Author*:\n$CIRCLE_PROJECT_USERNAME"
                    }
                  ]
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Job"
                      },
                      "url": "${CIRCLE_BUILD_URL}"
                    }
                  ]
                }
              ]
            }

  terraform-destroy:
  executor: terraform-executor
  steps:
    - checkout
    - *show-current-branch-name
    - run:
        name: Terraform Destroy
        command: |
          cd infrastructure/
          terraform init
          terraform workspace select ${CIRCLE_BRANCH} || terraform workspace new ${CIRCLE_BRANCH}
          terraform destroy --auto-approve

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows            
workflows:
  build_and_deploy:
    jobs:
      - build
      - linting:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - prettier:
          requires:
            - build
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-validate:
          requires:
            - linting
            - prettier
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - terraform-plan-and-apply:
          requires:
            - terraform-validate
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-s3:
          requires:
            - terraform-plan-and-apply
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - deploy-to-aws-cloudfront:
          requires:
            - deploy-to-aws-s3
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - notify-via-slack:
          requires:
            - deploy-to-aws-cloudfront
          filters:
            branches:
              only:
                - develop
                - staging
                - master
      - hold:
        type: approval
        requires:
          - deploy-to-aws-cloudfront
      - terraform-destroy:
          requires:
            - hold
          filters:
            branches:
              only:
                - develop
                - staging
                - master   


##workflows:
 ## sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    ##jobs:
      ##- node/test:
          # This is the node version to use for the `cimg/node` tag
          # Relevant tags can be found on the CircleCI Developer Hub
          # https://circleci.com/developer/images/image/cimg/node
          ##version: '16.10'
          # If you are using yarn, change the line below from "npm" to "yarn"
          ##pkg-manager: npm
